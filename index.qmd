---
title: "Simulation Challenge"
subtitle: "Monte Carlo Analysis"
format:
  html: default
  pdf: default
execute:
  echo: true
  eval: true
---

# Simulation Challenge

## The Investment Game

### Original Game Strategy

You are given $1,000 to play this game: Flip a coin each year until age 55. If heads, increase your balance by 50%. If tails, reduce your balance by 40%.

### Modified Game Strategy

Same as above, but you must bet exactly 50% of your current balance on each flip.

## Questions to Answer

### 75% Grade

1. **Expected Value Analysis:** What is the expected value after 1 coin flip for the original game?

```{r}
#| label: expected-value
#| echo: true

# Parameters for the original game
initial_balance <- 1000
heads_multiplier <- 1.5  # +50% gain
tails_multiplier <- 0.6  # -40% loss
probability_heads <- 0.5

# Calculate possible outcomes after 1 coin flip
heads_outcome <- initial_balance * heads_multiplier
tails_outcome <- initial_balance * tails_multiplier

# Calculate expected value
expected_value <- probability_heads * heads_outcome + (1 - probability_heads) * tails_outcome

# Display results
cat("Expected Value Analysis (1 coin flip):\n")
cat("=====================================\n")
cat("Initial balance: $", initial_balance, "\n", sep = "")
cat("Heads outcome (50% gain): $", heads_outcome, "\n", sep = "")
cat("Tails outcome (40% loss): $", tails_outcome, "\n", sep = "")
cat("Probability of heads: ", probability_heads, "\n", sep = "")
cat("Probability of tails: ", 1 - probability_heads, "\n", sep = "")
cat("\nExpected Value = P(Heads) × Heads_Outcome + P(Tails) × Tails_Outcome\n")
cat("Expected Value = ", probability_heads, " × $", heads_outcome, " + ", 1 - probability_heads, " × $", tails_outcome, "\n", sep = "")
cat("Expected Value = $", expected_value, "\n", sep = "")
cat("\nAnswer: The expected value after 1 coin flip is $", expected_value, "\n", sep = "")
```

**Discussion of Results:**

The expected value analysis reveals a counterintuitive but mathematically sound result: despite the asymmetric nature of the game (50% gain vs. 40% loss), the expected value is positive at $1,050. This represents a 5% expected return per coin flip, which seems favorable at first glance. However, this analysis only considers the average outcome over many trials. In reality, the multiplicative nature of the game creates significant volatility - a single bad streak of tails could dramatically reduce your balance, while a streak of heads could lead to substantial gains. The expected value calculation assumes we can play this game many times, but in practice, you only get one sequence of coin flips until age 55. This highlights the important distinction between expected value (what happens on average) and actual outcomes (what happens in your specific case), which is a key concept in understanding why this seemingly profitable game might not be as attractive as it initially appears.

2. **Expectation vs. Reality:** Is the expected value positive or negative? Do you expect your account to be worth more or less than $1,000?

```{r}
#| label: expectation-reality
#| echo: true

# Use the same parameters from Question 1
initial_balance <- 1000
expected_value <- 1050  # From previous calculation

# Calculate the difference from initial balance
expected_difference <- expected_value - initial_balance
expected_return_percent <- (expected_difference / initial_balance) * 100

# Analysis
cat("Expectation vs. Reality Analysis:\n")
cat("===============================\n")
cat("Initial balance: $", initial_balance, "\n", sep = "")
cat("Expected value after 1 flip: $", expected_value, "\n", sep = "")
cat("Expected difference: $", expected_difference, "\n", sep = "")
cat("Expected return: ", expected_return_percent, "%\n", sep = "")
cat("\n")

# Determine if positive or negative
if (expected_difference > 0) {
  cat("✓ The expected value is POSITIVE\n")
  cat("✓ You expect your account to be worth MORE than $1,000\n")
  cat("✓ Expected gain: $", expected_difference, " (", expected_return_percent, "%)\n", sep = "")
} else if (expected_difference < 0) {
  cat("✗ The expected value is NEGATIVE\n")
  cat("✗ You expect your account to be worth LESS than $1,000\n")
  cat("✗ Expected loss: $", abs(expected_difference), " (", abs(expected_return_percent), "%)\n", sep = "")
} else {
  cat("= The expected value is ZERO\n")
  cat("= You expect your account to be worth the SAME as $1,000\n")
}

cat("\nKey Insight:\n")
cat("The positive expected value suggests this game is theoretically favorable.\n")
cat("However, this is just the average outcome - your actual result could be very different!\n")
```

**Discussion of Results:**

The expectation vs. reality analysis confirms that the game appears mathematically favorable with a positive expected value of $1,050, representing a 5% expected return per coin flip. This suggests that, on average, players should expect to gain money. However, this analysis reveals a critical gap between theoretical expectations and practical outcomes. The positive expected value is based on the assumption that you can play this game many times, allowing the law of large numbers to work in your favor. In reality, you only get one sequence of coin flips from your current age until 55, which means you're subject to the full volatility of the game without the benefit of averaging. This creates a paradox: while the game is theoretically profitable, the high variance means you could easily end up with significantly less than your initial $1,000 investment. The 5% expected return per flip sounds attractive, but it doesn't account for the risk of ruin or the psychological impact of potentially large losses. This highlights why expected value alone is insufficient for decision-making in high-variance scenarios - you need to consider the entire distribution of possible outcomes, not just the average.

3. **Single Simulation:** Run one simulation showing account balance over time. Create a plot and comment on the results.

```{r}
#| label: single-simulation
#| echo: true

# Set seed for reproducibility
set.seed(123)

# Parameters
initial_balance <- 1000
heads_multiplier <- 1.5  # +50% gain
tails_multiplier <- 0.6  # -40% loss
n_years <- 35  # Assuming you start at age 20, play until 55

# Function to simulate one complete game
simulate_investment_game <- function(initial, years, heads_mult, tails_mult) {
  balance <- initial
  balance_history <- numeric(years + 1)
  balance_history[1] <- initial
  
  for (year in 1:years) {
    # Flip coin (1 = heads, 0 = tails)
    coin_flip <- rbinom(1, 1, 0.5)
    
    if (coin_flip == 1) {
      # Heads: gain 50%
      balance <- balance * heads_mult
    } else {
      # Tails: lose 40%
      balance <- balance * tails_mult
    }
    
    balance_history[year + 1] <- balance
  }
  
  return(balance_history)
}

# Run single simulation
simulation_result <- simulate_investment_game(initial_balance, n_years, heads_multiplier, tails_multiplier)

# Create data frame for plotting
simulation_data <- data.frame(
  year = 0:n_years,
  age = 20:(20 + n_years),
  balance = simulation_result
)

# Display key results
cat("Single Simulation Results:\n")
cat("========================\n")
cat("Initial balance (age 20): $", initial_balance, "\n", sep = "")
cat("Final balance (age 55): $", round(simulation_result[length(simulation_result)], 2), "\n", sep = "")
cat("Total return: $", round(simulation_result[length(simulation_result)] - initial_balance, 2), "\n", sep = "")
cat("Total return %: ", round(((simulation_result[length(simulation_result)] / initial_balance) - 1) * 100, 2), "%\n", sep = "")
cat("Maximum balance reached: $", round(max(simulation_result), 2), "\n", sep = "")
cat("Minimum balance reached: $", round(min(simulation_result), 2), "\n", sep = "")

# Create the plot
library(ggplot2)

ggplot(simulation_data, aes(x = age, y = balance)) +
  geom_line(color = "steelblue", linewidth = 1.2) +
  geom_point(color = "darkblue", size = 1.5) +
  geom_hline(yintercept = initial_balance, color = "red", linetype = "dashed", linewidth = 1) +
  labs(
    title = "Investment Game: Single Simulation Path",
    subtitle = "Account Balance from Age 20 to 55",
    x = "Age",
    y = "Account Balance ($)",
    caption = "Red dashed line shows initial investment of $1,000"
  ) +
  scale_y_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 11)
  ) +
  scale_x_continuous(breaks = seq(20, 55, 5))

# Show first few and last few years
cat("\nFirst 10 years:\n")
print(simulation_data[1:11, c("age", "balance")])

cat("\nLast 10 years:\n")
print(simulation_data[(nrow(simulation_data)-9):nrow(simulation_data), c("age", "balance")])
```

**Comments on the Results:**

The results of the simulation were extremely positive! At age 55 I ended with around $25,000 in my account. However, my account experienced a signficant drop during my last coin flip which resulted in my losing $15,000. While this last flip was painful, I'm still very happy overall with the results!

### 85% Grade

4. **Multiple Simulations:** Run 100 simulations. Create a probability distribution plot of final balances at age 55.

```{r}
#| label: multiple-simulations
#| echo: true

# Set seed for reproducibility
set.seed(123)

# Parameters
initial_balance <- 1000
heads_multiplier <- 1.5  # +50% gain
tails_multiplier <- 0.6  # -40% loss
n_years <- 35  # Age 20 to 55
n_simulations <- 100

# Function to simulate one complete game (same as Question 3)
simulate_investment_game <- function(initial, years, heads_mult, tails_mult) {
  balance <- initial
  for (year in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance * heads_mult
    } else {
      balance <- balance * tails_mult
    }
  }
  return(balance)
}

# Run 100 simulations
cat("Running 100 simulations...\n")
final_balances <- replicate(n_simulations, 
  simulate_investment_game(initial_balance, n_years, heads_multiplier, tails_multiplier))

# Create data frame for analysis
simulation_results <- data.frame(
  simulation = 1:n_simulations,
  final_balance = final_balances
)

# Calculate summary statistics
mean_balance <- mean(final_balances)
median_balance <- median(final_balances)
sd_balance <- sd(final_balances)
min_balance <- min(final_balances)
max_balance <- max(final_balances)
prob_above_initial <- mean(final_balances > initial_balance)
prob_above_10000 <- mean(final_balances > 10000)

# Display summary statistics
cat("\n100 Simulations Summary:\n")
cat("========================\n")
cat("Mean final balance: $", round(mean_balance, 2), "\n", sep = "")
cat("Median final balance: $", round(median_balance, 2), "\n", sep = "")
cat("Standard deviation: $", round(sd_balance, 2), "\n", sep = "")
cat("Minimum balance: $", round(min_balance, 2), "\n", sep = "")
cat("Maximum balance: $", round(max_balance, 2), "\n", sep = "")
cat("Probability above $1,000: ", round(prob_above_initial * 100, 1), "%\n", sep = "")
cat("Probability above $10,000: ", round(prob_above_10000 * 100, 1), "%\n", sep = "")

# Create probability distribution plot
library(ggplot2)

# Create the plot
p <- ggplot(simulation_results, aes(x = final_balance)) +
  geom_histogram(bins = 20, fill = "steelblue", alpha = 0.7, color = "black") +
  geom_vline(xintercept = initial_balance, color = "red", linetype = "dashed", linewidth = 1) +
  geom_vline(xintercept = mean_balance, color = "green", linetype = "solid", linewidth = 1) +
  labs(
    title = "Distribution of Final Account Balances",
    subtitle = "100 Simulations: Age 20 to 55",
    x = "Final Balance at Age 55 ($)",
    y = "Frequency",
    caption = "Red dashed line = Initial $1,000 | Green line = Mean"
  ) +
  scale_x_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 11)
  )

# Display the plot
print(p)

# Save the plot to the project folder
ggsave("originally.png", plot = p, width = 10, height = 6, dpi = 300)
cat("\nPlot saved as 'originally.png' in the project folder\n")

# Show distribution of results
cat("\nDistribution of Final Balances:\n")
cat("==============================\n")
cat("$0 - $100: ", sum(final_balances < 100), " simulations\n", sep = "")
cat("$100 - $1,000: ", sum(final_balances >= 100 & final_balances < 1000), " simulations\n", sep = "")
cat("$1,000 - $10,000: ", sum(final_balances >= 1000 & final_balances < 10000), " simulations\n", sep = "")
cat("$10,000 - $100,000: ", sum(final_balances >= 10000 & final_balances < 100000), " simulations\n", sep = "")
cat("$100,000+: ", sum(final_balances >= 100000), " simulations\n", sep = "")
```

### 95% Grade

5. **Probability Analysis:** What is the probability that your balance will be greater than $1,000 at age 55?

```{r}
#| label: probability-analysis
#| echo: true

# Your code here
```

### 100% Grade

6. **Strategy Comparison:** Run 100 simulations for the modified strategy. What is the probability of having more than $10,000 at age 55? Compare with the original game.

```{r}
#| label: strategy-comparison
#| echo: true

# Your code here
```