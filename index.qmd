---
title: "Simulation Challenge"
subtitle: "Monte Carlo Analysis"
format:
  html: default
execute:
  echo: false
  eval: true
  warning: false
  message: false
---

# Simulation Challenge

## The Investment Game

### Original Game Strategy

You are given $1,000 to play this game: Flip a coin each year until age 55. If heads, increase your balance by 50%. If tails, reduce your balance by 40%.

### Modified Game Strategy

Same as above, but you must bet exactly 50% of your current balance on each flip.

## Questions to Answer

### 75% Grade

1. **Expected Value Analysis:** What is the expected value after 1 coin flip for the original game?

```{r}
#| label: expected-value
#| echo: false

# Parameters for the original game
initial_balance <- 1000
heads_multiplier <- 1.5  # +50% gain
tails_multiplier <- 0.6  # -40% loss
probability_heads <- 0.5

# Calculate possible outcomes after 1 coin flip
heads_outcome <- initial_balance * heads_multiplier
tails_outcome <- initial_balance * tails_multiplier

# Calculate expected value
expected_value <- probability_heads * heads_outcome + (1 - probability_heads) * tails_outcome

# Display results
cat("Expected Value Analysis (1 coin flip):\n")
cat("=====================================\n")
cat("Initial balance: $", initial_balance, "\n", sep = "")
cat("Heads outcome (50% gain): $", heads_outcome, "\n", sep = "")
cat("Tails outcome (40% loss): $", tails_outcome, "\n", sep = "")
cat("Probability of heads: ", probability_heads, "\n", sep = "")
cat("Probability of tails: ", 1 - probability_heads, "\n", sep = "")
cat("\nExpected Value = P(Heads) × Heads_Outcome + P(Tails) × Tails_Outcome\n")
cat("Expected Value = ", probability_heads, " × $", heads_outcome, " + ", 1 - probability_heads, " × $", tails_outcome, "\n", sep = "")
cat("Expected Value = $", expected_value, "\n", sep = "")
cat("\nAnswer: The expected value after 1 coin flip is $", expected_value, "\n", sep = "")
```

**Discussion of Results:**

The game initially seems to be a good investment, but the expected value is only a theoretical average. In reality, the game is much riskier than it first appears. While the expected value is 1050, which is a 5% gain per flip, the actual outcome is much more volatile. Since the average tells you only the results of playing many times in the long run, it is not a good indicator of the actual outcome of a single game. 

2. **Expectation vs. Reality:** Is the expected value positive or negative? Do you expect your account to be worth more or less than $1,000?

```{r}
#| label: expectation-reality
#| echo: false

# Use the same parameters from Question 1
initial_balance <- 1000
expected_value <- 1050  # From previous calculation

# Calculate the difference from initial balance
expected_difference <- expected_value - initial_balance
expected_return_percent <- (expected_difference / initial_balance) * 100

# Analysis
cat("Expectation vs. Reality Analysis:\n")
cat("===============================\n")
cat("Initial balance: $", initial_balance, "\n", sep = "")
cat("Expected value after 1 flip: $", expected_value, "\n", sep = "")
cat("Expected difference: $", expected_difference, "\n", sep = "")
cat("Expected return: ", expected_return_percent, "%\n", sep = "")
cat("\n")

# Determine if positive or negative
if (expected_difference > 0) {
  cat("✓ The expected value is POSITIVE\n")
  cat("✓ You expect your account to be worth MORE than $1,000\n")
  cat("✓ Expected gain: $", expected_difference, " (", expected_return_percent, "%)\n", sep = "")
} else if (expected_difference < 0) {
  cat("✗ The expected value is NEGATIVE\n")
  cat("✗ You expect your account to be worth LESS than $1,000\n")
  cat("✗ Expected loss: $", abs(expected_difference), " (", abs(expected_return_percent), "%)\n", sep = "")
} else {
  cat("= The expected value is ZERO\n")
  cat("= You expect your account to be worth the SAME as $1,000\n")
}

cat("\nKey Insight:\n")
cat("The positive expected value suggests this game is theoretically favorable.\n")
cat("However, this is just the average outcome - your actual result could be very different!\n")
```

**Discussion of Results:**

On paper, the game looks enticing since the expected value is $1,050, or a 5% gain per flip. That suggests players should come out ahead on average. But averages only hold when you can play many many times. In reality, you only get one sequence of flips until age 55, and that exposes you to the full volatility of the rules. That being losing a few games can quickly drag your balance down, while on the other hand, a lucky run could make you thousands of dollars. The real lesson is that expected value shows the average, not the risk. In high-variance situations like this, you have to think about the whole range of possible outcome not just the average which can be deceiving.

3. **Single Simulation:** Run one simulation showing account balance over time. Create a plot and comment on the results.

```{r}
#| label: single-simulation
#| echo: false

# Set seed for reproducibility
set.seed(123)

# Parameters
initial_balance <- 1000
heads_multiplier <- 1.5  # +50% gain
tails_multiplier <- 0.6  # -40% loss
n_years <- 35  # Assuming you start at age 20, play until 55

# Function to simulate one complete game
simulate_investment_game <- function(initial, years, heads_mult, tails_mult) {
  balance <- initial
  balance_history <- numeric(years + 1)
  balance_history[1] <- initial
  
  for (year in 1:years) {
    # Flip coin (1 = heads, 0 = tails)
    coin_flip <- rbinom(1, 1, 0.5)
    
    if (coin_flip == 1) {
      # Heads: gain 50%
      balance <- balance * heads_mult
    } else {
      # Tails: lose 40%
      balance <- balance * tails_mult
    }
    
    balance_history[year + 1] <- balance
  }
  
  return(balance_history)
}

# Run single simulation
simulation_result <- simulate_investment_game(initial_balance, n_years, heads_multiplier, tails_multiplier)

# Create data frame for plotting
simulation_data <- data.frame(
  year = 0:n_years,
  age = 20:(20 + n_years),
  balance = simulation_result
)

# Display key results
cat("Single Simulation Results:\n")
cat("========================\n")
cat("Final balance (age 55): $", round(simulation_result[length(simulation_result)], 2), "\n", sep = "")
cat("Total return: ", round(((simulation_result[length(simulation_result)] / initial_balance) - 1) * 100, 1), "%\n", sep = "")
cat("Peak balance: $", round(max(simulation_result), 2), " | Low balance: $", round(min(simulation_result), 2), "\n", sep = "")

# Create the plot
library(ggplot2)

ggplot(simulation_data, aes(x = age, y = balance)) +
  geom_line(color = "steelblue", linewidth = 1.2) +
  geom_point(color = "darkblue", size = 1.5) +
  geom_hline(yintercept = initial_balance, color = "red", linetype = "dashed", linewidth = 1) +
  labs(
    title = "Investment Game: Single Simulation Path",
    subtitle = "Account Balance from Age 20 to 55",
    x = "Age",
    y = "Account Balance ($)",
    caption = "Red dashed line shows initial investment of $1,000"
  ) +
  scale_y_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 11)
  ) +
  scale_x_continuous(breaks = seq(20, 55, 5))

# Show first few and last few years
cat("\nFirst 10 years:\n")
print(simulation_data[1:11, c("age", "balance")])

cat("\nLast 10 years:\n")
print(simulation_data[(nrow(simulation_data)-9):nrow(simulation_data), c("age", "balance")])
```

**Comments on the Results:**

The results of the simulation were extremely positive! At age 55 I ended with around $25,000 in my account. However, my account experienced a signficant drop during my last coin flip which resulted in my losing $15,000. While this last flip was painful, I'm still very happy overall with the results!

### 85% Grade

4. **Multiple Simulations:** Run 100 simulations. Create a probability distribution plot of final balances at age 55.

```{r}
#| label: multiple-simulations
#| echo: false

# Set seed for reproducibility
set.seed(123)

# Parameters
initial_balance <- 1000
heads_multiplier <- 1.5  # +50% gain
tails_multiplier <- 0.6  # -40% loss
n_years <- 35  # Age 20 to 55
n_simulations <- 100

# Function to simulate one complete game (same as Question 3)
simulate_investment_game <- function(initial, years, heads_mult, tails_mult) {
  balance <- initial
  for (year in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance * heads_mult
    } else {
      balance <- balance * tails_mult
    }
  }
  return(balance)
}

# Run 100 simulations
cat("Running 100 simulations...\n")
final_balances <- replicate(n_simulations, 
  simulate_investment_game(initial_balance, n_years, heads_multiplier, tails_multiplier))

# Create data frame for analysis
simulation_results <- data.frame(
  simulation = 1:n_simulations,
  final_balance = final_balances
)

# Calculate summary statistics
mean_balance <- mean(final_balances)
median_balance <- median(final_balances)
sd_balance <- sd(final_balances)
min_balance <- min(final_balances)
max_balance <- max(final_balances)
prob_above_initial <- mean(final_balances > initial_balance)
prob_above_10000 <- mean(final_balances > 10000)

# Display summary statistics
cat("\n100 Simulations Summary:\n")
cat("========================\n")
cat("Mean: $", round(mean_balance, 0), " | Median: $", round(median_balance, 0), "\n", sep = "")
cat("Range: $", round(min_balance, 0), " to $", round(max_balance, 0), "\n", sep = "")
cat("Success rate (>$1,000): ", round(prob_above_initial * 100, 1), "%\n", sep = "")
cat("High success (>$10,000): ", round(prob_above_10000 * 100, 1), "%\n", sep = "")

# Create probability distribution plot
library(ggplot2)

# Create the plot
p <- ggplot(simulation_results, aes(x = final_balance)) +
  geom_histogram(bins = 20, fill = "steelblue", alpha = 0.7, color = "black") +
  geom_vline(xintercept = initial_balance, color = "red", linetype = "dashed", linewidth = 1) +
  geom_vline(xintercept = mean_balance, color = "green", linetype = "solid", linewidth = 1) +
  labs(
    title = "Distribution of Final Account Balances",
    subtitle = "100 Simulations: Age 20 to 55",
    x = "Final Balance at Age 55 ($)",
    y = "Frequency",
    caption = "Red dashed line = Initial $1,000 | Green line = Mean"
  ) +
  scale_x_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 11)
  )

# Display the plot
print(p)

# Note: Plot will be automatically saved by Quarto

# Show distribution of results
cat("\nDistribution:\n")
cat("============\n")
cat("Below $1,000: ", sum(final_balances < 1000), " | $1,000-$10,000: ", sum(final_balances >= 1000 & final_balances < 10000), " | Above $10,000: ", sum(final_balances >= 10000), "\n", sep = "")
```

*Distribution plot shown above*

### 95% Grade

5. **Probability Analysis:** What is the probability that your balance will be greater than $1,000 at age 55?

```{r}
#| label: probability-analysis
#| echo: false

# Use the same simulation results from Question 4
# (This assumes the 100 simulations were already run)
set.seed(123)

# Parameters
initial_balance <- 1000
heads_multiplier <- 1.5
tails_multiplier <- 0.6
n_years <- 35
n_simulations <- 100

# Function to simulate one complete game
simulate_investment_game <- function(initial, years, heads_mult, tails_mult) {
  balance <- initial
  for (year in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance * heads_mult
    } else {
      balance <- balance * tails_mult
    }
  }
  return(balance)
}

# Run 100 simulations (same as Question 4)
final_balances <- replicate(n_simulations, 
  simulate_investment_game(initial_balance, n_years, heads_multiplier, tails_multiplier))

# Calculate probability that balance > $1,000
prob_above_1000 <- mean(final_balances > 1000)
prob_below_1000 <- mean(final_balances <= 1000)

# Calculate additional probability thresholds
prob_above_10000 <- mean(final_balances > 10000)
prob_above_100000 <- mean(final_balances > 100000)

# Calculate confidence interval for the probability
n_sims <- length(final_balances)
se <- sqrt(prob_above_1000 * (1 - prob_above_1000) / n_sims)
ci_lower <- prob_above_1000 - 1.96 * se
ci_upper <- prob_above_1000 + 1.96 * se

# Display results
cat("Probability Analysis Results:\n")
cat("============================\n")
cat("Probability > $1,000: ", round(prob_above_1000 * 100, 1), "% (", sum(final_balances > 1000), " out of ", n_sims, " simulations)\n", sep = "")
cat("95% Confidence Interval: [", round(ci_lower * 100, 1), "%, ", round(ci_upper * 100, 1), "%]\n", sep = "")
cat("Probability > $10,000: ", round(prob_above_10000 * 100, 1), "%\n", sep = "")
cat("Expected final balance: $", round(mean(final_balances), 0), "\n", sep = "")
```
**Answer:** 26% chance of having greater than $1,000 at age 55.


### 100% Grade

6. **Strategy Comparison:** Run 100 simulations for the modified strategy. What is the probability of having more than $10,000 at age 55? Compare with the original game.

```{r}
#| label: strategy-comparison
#| #| echo: false
# Question 6: Strategy Comparison
# Set seed for reproducibility
set.seed(123)

# Parameters for both strategies
initial_balance <- 1000
n_years <- 35  # Age 20 to 55
n_simulations <- 100

# Original strategy parameters
orig_heads_multiplier <- 1.5  # +50% gain
orig_tails_multiplier <- 0.6  # -40% loss

# Modified strategy parameters (bet exactly 50% of current balance)
mod_heads_multiplier <- 1.5  # +50% gain on the 50% bet
mod_tails_multiplier <- 0.5  # -50% loss on the 50% bet

# Function to simulate original strategy
simulate_original_strategy <- function(initial, years, heads_mult, tails_mult) {
  balance <- initial
  for (year in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance * heads_mult
    } else {
      balance <- balance * tails_mult
    }
  }
  return(balance)
}

# Function to simulate modified strategy (bet 50% of current balance)
simulate_modified_strategy <- function(initial, years) {
  balance <- initial
  for (year in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)
    bet_amount <- balance * 0.5  # Bet exactly 50% of current balance
    
    if (coin_flip == 1) {
      # Heads: gain 50% on the bet
      balance <- balance - bet_amount + (bet_amount * 1.5)
    } else {
      # Tails: lose 50% on the bet
      balance <- balance - bet_amount + (bet_amount * 0.5)
    }
  }
  return(balance)
}

# Run 100 simulations for original strategy
cat("Running 100 simulations for Original Strategy...\n")
orig_final_balances <- replicate(n_simulations, 
  simulate_original_strategy(initial_balance, n_years, orig_heads_multiplier, orig_tails_multiplier))

# Run 100 simulations for modified strategy
cat("Running 100 simulations for Modified Strategy...\n")
mod_final_balances <- replicate(n_simulations, 
  simulate_modified_strategy(initial_balance, n_years))

# Calculate probabilities for both strategies
orig_prob_above_1000 <- mean(orig_final_balances > 1000)
orig_prob_above_10000 <- mean(orig_final_balances > 10000)
mod_prob_above_1000 <- mean(mod_final_balances > 1000)
mod_prob_above_10000 <- mean(mod_final_balances > 10000)

# Calculate summary statistics
orig_mean <- mean(orig_final_balances)
orig_median <- median(orig_final_balances)
orig_sd <- sd(orig_final_balances)
mod_mean <- mean(mod_final_balances)
mod_median <- median(mod_final_balances)
mod_sd <- sd(mod_final_balances)

# Display comparison results
cat("\nStrategy Comparison Results:\n")
cat("============================\n")
cat("ORIGINAL STRATEGY (100% at risk):\n")
cat("  Mean: $", round(orig_mean, 0), " | Success rate: ", round(orig_prob_above_1000 * 100, 1), "% | High success: ", round(orig_prob_above_10000 * 100, 1), "%\n", sep = "")

cat("\nMODIFIED STRATEGY (50% at risk):\n")
cat("  Mean: $", round(mod_mean, 0), " | Success rate: ", round(mod_prob_above_1000 * 100, 1), "% | High success: ", round(mod_prob_above_10000 * 100, 1), "%\n", sep = "")

# Create comparison data frame
comparison_data <- data.frame(
  Strategy = rep(c("Original", "Modified"), each = n_simulations),
  Final_Balance = c(orig_final_balances, mod_final_balances)
)

# Create comparison plot
library(ggplot2)

p_comparison <- ggplot(comparison_data, aes(x = Final_Balance, fill = Strategy)) +
  geom_histogram(alpha = 0.7, bins = 20, position = "identity") +
  geom_vline(xintercept = 1000, color = "red", linetype = "dashed", linewidth = 1) +
  geom_vline(xintercept = 10000, color = "blue", linetype = "dashed", linewidth = 1) +
  facet_wrap(~ Strategy, scales = "free_y") +
  labs(
    title = "Strategy Comparison: Final Balance Distributions",
    subtitle = "100 Simulations Each - Original vs Modified Strategy",
    x = "Final Balance at Age 55 ($)",
    y = "Frequency",
    caption = "Red line = $1,000 | Blue line = $10,000"
  ) +
  scale_x_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 11),
    legend.position = "bottom"
  )

print(p_comparison)

# Statistical comparison
cat("\nCOMPARISON:\n")
cat("===========\n")
cat("Mean difference: $", round(mod_mean - orig_mean, 0), "\n", sep = "")
cat("Success rate difference: ", round((mod_prob_above_1000 - orig_prob_above_1000) * 100, 1), " percentage points\n", sep = "")
cat("High success difference: ", round((mod_prob_above_10000 - orig_prob_above_10000) * 100, 1), " percentage points\n", sep = "")
```

**Comments on the Results:**

The strategy comparison reveals fascinating insights about risk management in investment strategies. The modified strategy, which only risks 50% of the current balance on each flip, shows significantly different characteristics compared to the original strategy that risks 100% of the balance. 

The modified strategy demonstrates lower volatility and more conservative outcomes, with a higher probability of maintaining wealth above the initial $1,000 threshold. However, this comes at the cost of lower expected returns and reduced probability of achieving the high-reward outcomes that make the original strategy potentially lucrative.

This analysis highlights a fundamental trade-off in investment strategy design: **risk reduction comes at the cost of potential upside**. The modified strategy provides more consistent, predictable outcomes but sacrifices the possibility of extreme gains that characterize the original high-risk approach. This comparison is particularly valuable for understanding how different risk management approaches can fundamentally alter the probability distribution of investment outcomes.